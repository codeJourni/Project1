{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "project1Factory1"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorageCustomers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageCustomers'"
		},
		"AzureBlobStorageProducts_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageProducts'"
		},
		"PostgreSQL_Cluster_Link_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PostgreSQL_Cluster_Link'"
		},
		"realistic_customers1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'realistic_customers1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageCustomers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageCustomers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageProducts')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageProducts_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSQL_Cluster_Link')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "1.0",
				"typeProperties": {
					"connectionString": "[parameters('PostgreSQL_Cluster_Link_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/realistic_customers1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "1.0",
				"typeProperties": {
					"connectionString": "[parameters('realistic_customers1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AlternateEmailTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL_Cluster_Link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "alternate_email_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "customer_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "email_address",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "alternateemails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSQL_Cluster_Link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConversationsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL_Cluster_Link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "conversation_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "customer_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "conversations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSQL_Cluster_Link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomersDataJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageCustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "realistic_customers.json",
						"container": "customer-data-container"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"CustomerID": {
							"type": "integer"
						},
						"Profile": {
							"type": "object",
							"properties": {
								"FirstName": {
									"type": "string"
								},
								"LastName": {
									"type": "string"
								},
								"Email": {
									"type": "string"
								}
							}
						},
						"Conversations": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ConversationID": {
										"type": "string"
									},
									"Messages": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"DateTime": {
													"type": "string"
												},
												"Sender": {
													"type": "string"
												},
												"Message": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageCustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "realistic-customers.csv",
						"container": "customer-data-container"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "LastPurchaseDate",
						"type": "String"
					},
					{
						"name": "TotalSpent",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MessagesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL_Cluster_Link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "conversation_id",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "support_agent",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "message_sender",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "message",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "timestamp",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "conversationmessages"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSQL_Cluster_Link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsDataJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageProducts",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "products.json",
						"container": "product-data-container"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"ProductID": {
							"type": "integer"
						},
						"ProductName": {
							"type": "string"
						},
						"Price": {
							"type": "number"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL_Cluster_Link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "product_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "product_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "price",
						"type": "numeric",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSQL_Cluster_Link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdatedCustomerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PostgreSQL_Cluster_Link",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "first_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "email_address",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "phone_number",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_purchase_date",
						"type": "date",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_spent",
						"type": "numeric",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PostgreSQL_Cluster_Link')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AlternateEmailFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "CustomersDataJSON",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AlternateEmailTable",
								"type": "DatasetReference"
							},
							"name": "AlternateEmailSink"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          LastPurchaseDate as string,",
						"          TotalSpent as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          CustomerID as integer,",
						"          Profile as (FirstName as string, LastName as string, Email as string),",
						"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source2",
						"source1, source2 join(toInteger(source1@CustomerID) == source2@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customer_id = source1@CustomerID,",
						"          email_address = Profile.Email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(upsertIf(!isNull(customer_id)),",
						"     insertIf(isNull(customer_id))) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          alternate_email_id as integer,",
						"          customer_id as integer,",
						"          email_address as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customer_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          customer_id,",
						"          email_address",
						"     )) ~> AlternateEmailSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/CustomersDataJSON')]",
				"[concat(variables('factoryId'), '/datasets/AlternateEmailTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConversationsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomersDataJSON",
								"type": "DatasetReference"
							},
							"name": "ConversationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ConversationsTable",
								"type": "DatasetReference"
							},
							"name": "ConversationsSink"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Conversations as (ConversationID as string, Messages as (DateTime as timestamp, Message as string, Sender as string, SupportAgent as string)[])[],",
						"          CustomerID as short,",
						"          Profile as (Email as string, FirstName as string, LastName as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> ConversationsSource",
						"ConversationsSource foldDown(unroll(Conversations),",
						"     mapColumn(",
						"          customer_id = CustomerID,",
						"          conversation_id = Conversations",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(conversation_id = conversation_id.ConversationID,",
						"          customer_id = toInteger(customer_id)) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(!isNull(customer_id)),",
						"     insertIf(isNull(customer_id))) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          conversation_id as integer,",
						"          customer_id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customer_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          conversation_id,",
						"          customer_id",
						"     )) ~> ConversationsSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomersDataJSON')]",
				"[concat(variables('factoryId'), '/datasets/ConversationsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "CustomerData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "UpdatedCustomerTable",
								"type": "DatasetReference"
							},
							"name": "CustomersSink",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorageCustomers",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          LastPurchaseDate as string,",
						"          TotalSpent as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerData",
						"CustomerData derive(first_name = split(replace(replace(replace(replace(replace(replace(replace(replace(replace(Name, 'Dr. ', ''), 'Mr. ', ''), 'Ms. ', ''), 'Mrs. ', ''), ' MD', ''), ' DDS', ''), ' PhD', ''), ' DVM', ''), ' Jr.', ''), ' ')[1],",
						"          last_name = split(replace(replace(replace(replace(replace(replace(replace(replace(replace(Name, 'Dr. ', ''), 'Mr. ', ''), 'Ms. ', ''), 'Mrs. ', ''), ' MD', ''), ' DDS', ''), ' PhD', ''), ' DVM', ''), ' Jr.', ''), ' ')[2],",
						"          telephone = iif(\r",
						"    regexMatch(replace(replace(replace(replace(Phone, '-', ''), '(', ''), ')', ''), ' ', ''), '^[0-9]{10}$'),\r",
						"    replace(replace(replace(replace(Phone, '-', ''), '(', ''), ')', ''), ' ', ''),\r",
						"    toString(null())\r",
						"),",
						"          LastPurchaseDate = toTimestamp(LastPurchaseDate, 'M/d/yyyy')) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(!isNull(CustomerID)),",
						"     insertIf(isNull(CustomerID))) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: true,",
						"     input(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          email_address as string,",
						"          phone_number as string,",
						"          last_purchase_date as date,",
						"          total_spent as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customer_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          customer_id = CustomerID,",
						"          first_name,",
						"          last_name,",
						"          email_address = Email,",
						"          phone_number = telephone,",
						"          last_purchase_date = LastPurchaseDate,",
						"          total_spent = TotalSpent",
						"     )) ~> CustomersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/UpdatedCustomerTable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageCustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductsDataJSON",
								"type": "DatasetReference"
							},
							"name": "ProductsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductsTable",
								"type": "DatasetReference"
							},
							"name": "ProductsSink"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Price as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> ProductsSource",
						"ProductsSource alterRow(upsertIf(!isNull(ProductID)),",
						"     insertIf(isNull(ProductID))) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          product_id as integer,",
						"          product_name as string,",
						"          price as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['product_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          product_id = ProductID,",
						"          product_name = ProductName,",
						"          price = Price",
						"     )) ~> ProductsSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProductsDataJSON')]",
				"[concat(variables('factoryId'), '/datasets/ProductsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MessagesFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomersDataJSON",
								"type": "DatasetReference"
							},
							"name": "MessagesSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MessagesTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flattenConversations"
						},
						{
							"name": "flattenMessages"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          Profile as (FirstName as string, LastName as string, Email as string),",
						"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string, SupportAgent as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> MessagesSource",
						"MessagesSource foldDown(unroll(Conversations),",
						"     mapColumn(",
						"          ConversationID = Conversations.ConversationID,",
						"          Messages = Conversations.Messages",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenConversations",
						"flattenConversations foldDown(unroll(Messages),",
						"     mapColumn(",
						"          ConversationID,",
						"          SupportAgent = Messages.SupportAgent,",
						"          Sender = Messages.Sender,",
						"          Message = Messages.Message,",
						"          DateTime = Messages.DateTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenMessages",
						"flattenMessages sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          conversation_id as string,",
						"          support_agent as integer,",
						"          message_sender as string,",
						"          message as string,",
						"          timestamp as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          conversation_id = ConversationID,",
						"          support_agent = SupportAgent,",
						"          message_sender = Sender,",
						"          message = Message,",
						"          timestamp = DateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomersDataJSON')]",
				"[concat(variables('factoryId'), '/datasets/MessagesTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AlternateEmailFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AlternateEmailFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"AlternateEmailSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AlternateEmailFlow')]"
			]
		}
	]
}